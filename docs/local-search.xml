<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mysql索引</title>
    <link href="/2021/03/16/Mysql%E7%B4%A2%E5%BC%95/"/>
    <url>/2021/03/16/Mysql%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h2>MySQL索引</h2><p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：<strong>索引是数据结构。</strong></p><h3>MySQL索引原理</h3><p><strong>索引目的</strong></p><p>索引的目的在于提高查询效率，可以类比字典，如果要查&ldquo;mysql&rdquo;这个单词，我们肯定需要定位到m字母，然后从上往下找到y字母，再找到剩下的sql。如果没有索引，那么你可能需要把所有单词看一遍才能找到你想要的，如果我想找到m开头的单词呢？或者ze开头的单词呢？是不是觉得如果没有索引，这个事情根本无法完成？</p><p>咱们去图书馆借书也是一样，如果你要借某一本书，一定是先找到对应的分类科目，再找到对应的编号，这是生活中活生生的例子，通用索引，可以加快查询速度，快速定位。</p><p><strong>索引原理</strong></p><p>所有索引原理都是一样的，通过不断的缩小想要获得数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是我们总是通过同一种查找方式来锁定数据。</p><p>数据库也是一样，但显然要复杂许多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between)、模糊查询(like)、并集查询(or)、多值匹配（in【in本质上属于多个or】）等等。数据库应该选择怎么样的方式来应对所有的问题呢？</p><p>我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段&hellip;&hellip;这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？</p><p>稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的，数据库实现比较复杂，数据保存在磁盘上，而为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。</p><p><strong>索引结构</strong></p><p>任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，b+树应运而生。</p><p><strong>b+树的索引结构解释</strong></p><p><strong><img src="https://img2018.cnblogs.com/i-beta/1829478/201911/1829478-20191120113854244-516625994.png" alt="" /></strong></p><p>浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p><p><strong>b+树的查找过程</strong></p><p>如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。</p><p>真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</p><p><strong>b+树性质</strong></p><p>1、通过上面的分析，我们知道间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</p><p>2、当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。</p><p>比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p><h3>MySQL 索引实现</h3><p>在MySQL中，索引属于存储引擎级别的概念，不同存储引擎对索引的实现方式是不同的，本文主要讨论MyISAM和InnoDB两个存储引擎的索引实现方式。</p><p><strong>MyISAM索引实现</strong></p><p><strong>MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址。</strong></p><p>下图是MyISAM索引的原理图：</p><p><img src="https://img2018.cnblogs.com/i-beta/1829478/201911/1829478-20191120113929542-1997887833.png" alt="" /></p><p>&nbsp;</p><p>&nbsp;这里设表一共有三列，假设我们以Col1为主键，则上图便是一个MyISAM表的主索引（Primary key）示意图。可以看出MyISAM的索引文件仅仅保存数据记录的地址。在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。如果我们在Col2上建立一个辅助索引，则此索引的结构如下图所示：</p><p><img src="https://img2018.cnblogs.com/i-beta/1829478/201911/1829478-20191120113955124-1372138374.png" alt="" /></p><p>同样也是一颗B+Tree，data域保存数据记录的地址。因此，MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。</p><p>MyISAM的索引方式也叫做&ldquo;非聚集&rdquo;的，之所以这么称呼是为了与InnoDB的聚集索引区分。</p><p><strong>InnoDB索引实现</strong></p><p>虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。</p><p>第一个重大区别是InnoDB的数据文件本身就是索引文件。从上文知道，MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。</p><p><img src="https://img2018.cnblogs.com/i-beta/1829478/201911/1829478-20191120114014123-214468893.png" alt="" /></p><p>上图是InnoDB主索引（同时也是数据文件）的示意图，可以看到叶节点包含了完整的数据记录。这种索引叫做聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。</p><p>第二个与MyISAM索引的不同是InnoDB的辅助索引data域存储相应记录主键的值而不是地址。换句话说，InnoDB的所有辅助索引都引用主键作为data域。例如，下图为定义在Col3上的一个辅助索引：</p><p><img src="https://img2018.cnblogs.com/i-beta/1829478/201911/1829478-20191120114045276-482384183.png" alt="" /></p><p>这里以英文字符的ASCII码作为比较准则。聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。</p><p>了解不同存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助，例如知道了InnoDB的索引实现后，就很容易明白为什么不建议使用过长的字段作为主键，因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大。再例如，用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。</p><h2>如何建立合适的索引</h2><p><strong>建立索引的原理</strong></p><p>一个最重要的原则是最左前缀原理，在提这个之前要先说下联合索引，MySQL中的索引可以以一定顺序引用多个列，这种索引叫做联合索引，一般的，一个联合索引是一个有序元组&lt;a1, an=""&gt;，其中各个元素均为数据表的一列。另外，单列索引可以看成联合索引元素数为1的特例。</p><p>索引匹配的最左原则具体是说，假如索引列分别为A，B，C，顺序也是A，B，C：</p><ul class="list-paddingleft-2"><li><p>那么查询的时候，如果查询【A】【A，B】 【A，B，C】，那么可以通过索引查询</p></li><li><p>如果查询的时候，采用【A，C】，那么C这个虽然是索引，但是由于中间缺失了B，因此C这个索引是用不到的，只能用到A索引</p></li><li><p>如果查询的时候，采用【B】 【B，C】 【C】，由于没有用到第一列索引，不是最左前缀，那么后面的索引也是用不到了</p></li><li><p>如果查询的时候，采用范围查询，并且是最左前缀，也就是第一列索引，那么可以用到索引，但是范围后面的列无法用到索引</p></li></ul><p>因为索引虽然加快了查询速度，但索引也是有代价的：索引文件本身要消耗存储空间，同时索引会加重插入、删除和修改记录时的负担，另外，MySQL在运行时也要消耗资源维护索引，因此索引并不是越多越好</p><p>在使用InnoDB存储引擎时，如果没有特别的需要，请永远使用一个与业务无关的自增字段作为主键。如果从数据库索引优化角度看，使用InnoDB引擎而不使用自增主键绝对是一个糟糕的主意。</p><p>InnoDB使用聚集索引，数据记录本身被存于主索引（一颗B+Tree）的叶子节点上。这就要求同一个叶子节点内（大小为一个内存页或磁盘页）的各条数据记录按主键顺序存放，因此每当有一条新的记录插入时，MySQL会根据其主键将其插入适当的节点和位置，如果页面达到装载因子（InnoDB默认为15/16），则开辟一个新的页（节点）。如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页。如下：</p><p><img src="https://img2018.cnblogs.com/i-beta/1829478/201911/1829478-20191120114119882-822252628.png" alt="" /></p><p>这样就会形成一个紧凑的索引结构，近似顺序填满。由于每次插入时也不需要移动已有数据，因此效率很高，也不会增加很多开销在维护索引上。</p><p>如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置，如下：</p><p><img src="https://img2018.cnblogs.com/i-beta/1829478/201911/1829478-20191120114137542-1290283915.png" alt="" /></p><p>此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。</p><p>因此，只要可以，请尽量在InnoDB上采用自增字段做主键。</p><h3>建立索引的常用技巧</h3><p>1、最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2、=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><p>3、尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p><p>4、索引列不能参与计算，保持列&ldquo;干净&rdquo;，比如from_unixtime(create_time) = &rsquo;2014-05-29&rsquo;就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(&rsquo;2014-05-29&rsquo;);</p><p>5、尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可，当然要考虑原有数据和线上使用情况</p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2021/03/16/%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/03/16/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h2>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5 新特性</title>
    <link href="/2020/02/22/h5/"/>
    <url>/2020/02/22/h5/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML5-新特性"><a href="#HTML5-新特性" class="headerlink" title="HTML5 新特性"></a>HTML5 新特性</h1><h2 id="1-语义化标签"><a href="#1-语义化标签" class="headerlink" title="1.语义化标签"></a>1.语义化标签</h2><p>语义化标签具有良好的可读性，便于代码开发和维护，也有助于 seo，方便爬虫解析数据。在样式丢失的时候，浏览器也可以渲染出可读的结构。常见的有：</p><table><thead><tr><th align="left">标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">&lt; header &gt;</td><td align="center">文档的头部区域</td></tr><tr><td align="left">&lt; nav &gt;</td><td align="center">文档导航部分</td></tr><tr><td align="left">&lt; main &gt;</td><td align="center">页面的主要内容</td></tr><tr><td align="left">&lt; section &gt;</td><td align="center">文档的一个区块</td></tr><tr><td align="left">&lt; aside &gt;</td><td align="center">页面的侧边栏</td></tr><tr><td align="left">&lt; footer &gt;</td><td align="center">文档的页脚</td></tr><tr><td align="left">&lt; detail &gt;</td><td align="center">描述部分细节</td></tr><tr><td align="left">&lt; time &gt;</td><td align="center">时间</td></tr><tr><td align="left">&lt; maek &gt;</td><td align="center">有记号的文本</td></tr></tbody></table><h2 id="2-新表单类型"><a href="#2-新表单类型" class="headerlink" title="2.新表单类型"></a>2.新表单类型</h2><p>因为这些样式比较丑，一般都不会使用原生的标签。</p><ul><li><p>&lt;input type=”email” / &gt; <input type="email" /> e-mail 输入域</p></li><li><p>&lt; input type=”number” / &gt; <input type="number" /> 数字输入域</p></li><li><p>&lt; input type=”url” / &gt; <input type="url" /> URL 地址的输入域</p></li><li><p>&lt; input type=”range” / &gt; <input type="range" /> range 类型显示为滑动条，默认 value 值是 1~100 的限定范围，可以通过 min 属性和 max 属性自定义范围<input type="range" name="points" min="1" max="10" /></p></li><li><p>&lt; input type=”search” / &gt; <input type="search" /> 用于搜索域</p></li><li><p>&lt; input type=”color” / &gt; <input type="color" /> 用于定义选择颜色</p></li><li><p>&lt; input type=”tel” / &gt; <input type="tel" /> 电话号码输入域</p></li><li><p>&lt; input type=”date” / &gt; <input type="date" /> date 类型为时间选择器</p></li></ul><h2 id="3-新多媒体元素"><a href="#3-新多媒体元素" class="headerlink" title="3.新多媒体元素"></a>3.新多媒体元素</h2><ul><li>&lt; audio &gt; 音频内容</li><li>&lt; video &gt; 视频内容</li><li>&lt; track &gt; 媒体的外部文本轨道</li></ul><h2 id="4-Canvas-画布"><a href="#4-Canvas-画布" class="headerlink" title="4.Canvas 画布"></a>4.Canvas 画布</h2><p>HTML5 &lt; Canvas &gt;元素用于图形的绘制，通过脚本 (通常是 JavaScript)来完成.</p><p>&lt; Canvas &gt;标签只是图形容器，须使用脚本来绘制图形。</p><p>moveTo(x,y) 定义线条开始坐标，lineTo(x,y) 定义线条结束坐标,lineWidth 设置线宽，fillText()设置绘制的文本和位置,stroke()执行绘画。</p><h2 id="5-可伸缩矢量图形-svg"><a href="#5-可伸缩矢量图形-svg" class="headerlink" title="5.可伸缩矢量图形 svg"></a>5.可伸缩矢量图形 svg</h2><p>HTML5 能够将 SVG 元素直接嵌入 HTML 页面中</p><ol><li>和传统的图像比起来，尺寸更小，且可压缩性更强</li><li>可以任意缩放图像显示，而不会破坏图像的清晰度、细节等。</li><li>任何分辨率之下都可以被完美的打印</li><li>svg 中图像中的文本是可选的，同时也是可搜索。</li></ol><h2 id="6-Web-存储"><a href="#6-Web-存储" class="headerlink" title="6. Web 存储"></a>6. Web 存储</h2><p>localStorage, 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。</p><p>sessionStorage, 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</p><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><p>不管是 localStorage，还是 sessionStorage，可使用的 API 都相同，常用的有如下几个（以 localStorage 为例）</p><ul><li>保存数据：localStorage.setItem(key,value);</li><li>读取数据：localStorage.getItem(key);</li><li>删除单个数据：localStorage.removeItem(key);</li><li>删除所有数据：localStorage.clear();</li><li>得到某个索引的 key：localStorage.key(index);</li></ul><h2 id="7-定位"><a href="#7-定位" class="headerlink" title="7.定位"></a>7.定位</h2><p>HTML5 的 Geolocation API 用于获得用户的地理位置。</p><table><thead><tr><th align="left">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">coords.latitude</td><td align="center">十进制数的纬度</td></tr><tr><td align="left">coords.longitude</td><td align="center">十进制数的经度</td></tr><tr><td align="left">coords.accuracy</td><td align="center">位置精度</td></tr><tr><td align="left">coords.altitude</td><td align="center">海拔，海平面以上以米计</td></tr><tr><td align="left">coords.altitudeAccuracy</td><td align="center">位置的海拔精度</td></tr><tr><td align="left">coords.heading</td><td align="center">方向，从正北开始以度计</td></tr><tr><td align="left">coords.speed</td><td align="center">速度，以米/每秒计</td></tr><tr><td align="left">timestamp</td><td align="center">响应的日期/时间</td></tr></tbody></table><h2 id="8-应用程序缓存（Application-Cache）"><a href="#8-应用程序缓存（Application-Cache）" class="headerlink" title="8.应用程序缓存（Application Cache）"></a>8.应用程序缓存（Application Cache）</h2><h2 id="9-WebSocket"><a href="#9-WebSocket" class="headerlink" title="9.WebSocket"></a>9.WebSocket</h2>]]></content>
    
    
    <categories>
      
      <category>html</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flex 布局</title>
    <link href="/2020/02/02/flex/"/>
    <url>/2020/02/02/flex/</url>
    
    <content type="html"><![CDATA[<h1 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h1><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><h3 id="flex-direction-主轴方向"><a href="#flex-direction-主轴方向" class="headerlink" title="flex-direction 主轴方向"></a>flex-direction 主轴方向</h3><table><thead><tr><th align="left">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">row (默认)</td><td align="left">水平主轴 左端开始</td></tr><tr><td align="left">row-reverse</td><td align="left">水平主轴 右端端开始</td></tr><tr><td align="left">column</td><td align="left">垂直主轴 上端起点</td></tr><tr><td align="left">column-reverse</td><td align="left">垂直主轴 下端端起点</td></tr></tbody></table><h3 id="flex-wrap-轴线上的换行方式"><a href="#flex-wrap-轴线上的换行方式" class="headerlink" title="flex-wrap 轴线上的换行方式"></a>flex-wrap 轴线上的换行方式</h3><table><thead><tr><th align="left">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">nowrap (默认)</td><td align="left">不换行</td></tr><tr><td align="left">warp</td><td align="left">换行 第二行在第一行下</td></tr><tr><td align="left">warp-reverse</td><td align="left">换行 第二行在第一行下</td></tr></tbody></table><h3 id="flex-flow-方向和换行方式"><a href="#flex-flow-方向和换行方式" class="headerlink" title="flex-flow 方向和换行方式"></a>flex-flow 方向和换行方式</h3><p>flex-flow 是 flex-direction 和 flex-warp 的简写属性<br>默认为 row nowrap</p><h3 id="justify-content-主轴上的对齐方式"><a href="#justify-content-主轴上的对齐方式" class="headerlink" title="justify-content 主轴上的对齐方式"></a>justify-content 主轴上的对齐方式</h3><table><thead><tr><th align="left">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">flex-start（默认值）</td><td align="left">左对齐</td></tr><tr><td align="left">flex-end</td><td align="left">右对齐</td></tr><tr><td align="left">center</td><td align="left">居中</td></tr><tr><td align="left">space-between</td><td align="left">两端对齐，项目之间的间隔都相等</td></tr><tr><td align="left">space-around</td><td align="left">每个项目两侧的间隔相等</td></tr></tbody></table><p><strong>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔会比项目与边框的间隔大一倍。</strong></p><h3 id="align-items-交叉轴的对其方式"><a href="#align-items-交叉轴的对其方式" class="headerlink" title="align-items 交叉轴的对其方式"></a>align-items 交叉轴的对其方式</h3><table><thead><tr><th align="left">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">flex-start</td><td align="left">交叉轴的起点对齐。</td></tr><tr><td align="left">flex-end</td><td align="left">交叉轴的终点对齐。</td></tr><tr><td align="left">center</td><td align="left">交叉轴的中点对齐。</td></tr><tr><td align="left">baseline</td><td align="left">项目的第一行文字的基线对齐。</td></tr><tr><td align="left">stretch（默认值）</td><td align="left">未设置高度或设为 auto 则占满高度</td></tr></tbody></table><h3 id="align-content-多根轴线的对齐方式"><a href="#align-content-多根轴线的对齐方式" class="headerlink" title="align-content 多根轴线的对齐方式"></a>align-content 多根轴线的对齐方式</h3><p>如果项目只有一根轴线(多行)，该属性不起作用。<br>多跟轴线，即会有多行，此时 flex-wrap 不为 nowrap</p><table><thead><tr><th align="left">属性值</th><th align="left"></th></tr></thead><tbody><tr><td align="left">flex-start</td><td align="left">与交叉轴的起点对齐。</td></tr><tr><td align="left">flex-end</td><td align="left">与交叉轴的终点对齐。</td></tr><tr><td align="left">center</td><td align="left">与交叉轴的中点对齐。</td></tr><tr><td align="left">space-between</td><td align="left">与交叉轴两端对齐，</td></tr><tr><td align="left">space-around</td><td align="left">根轴线两侧的间隔都相等。</td></tr><tr><td align="left">stretch（默认值）</td><td align="left">轴线占满整个交叉轴。（均分）</td></tr></tbody></table><h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><h3 id="order-项目顺序"><a href="#order-项目顺序" class="headerlink" title="order 项目顺序"></a>order 项目顺序</h3><p>定义项目的排列顺序。值为整数，数值越小，排列越靠前，默认为 0。</p><h3 id="flex-grow-放大比例"><a href="#flex-grow-放大比例" class="headerlink" title="flex-grow 放大比例"></a>flex-grow 放大比例</h3><p>属性定义项目的放大比例，默认为 0，即如果存在<strong>剩余空间</strong>，也不放大。</p><p>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。<br>flex-grow  默认为0 若设置某个项目为1，其他为0，此项目将占据所有剩余空间。<br><code>.item &#123; flex-grow: &lt;number&gt;; /* 默认 0 */ &#125;</code></p><h3 id="flex-shrink-缩小比例"><a href="#flex-shrink-缩小比例" class="headerlink" title="flex-shrink 缩小比例"></a>flex-shrink 缩小比例</h3><p>项目的缩小比例，属性值为数字，默认为 1，即默认等比例缩小，当项目设置为零时，此项目不缩小。<br><code>.item &#123; flex-shrink: &lt;number&gt;; /* 默认 1 */ &#125;</code></p><h3 id="flex-basis-本体占据主轴的空间"><a href="#flex-basis-本体占据主轴的空间" class="headerlink" title="flex-basis 本体占据主轴的空间"></a>flex-basis 本体占据主轴的空间</h3><p>通过 flex-basis ，控制项目在前两个属性放大或缩小前占据主轴的空间。<br>默认值为 auto，即为项目本身大小,可以设置类似于 width 属性的属性值来调整。</p><p><code>.item &#123; flex-basis: &lt;length&gt; | auto; /* default auto */ &#125;</code></p><h3 id="flex-项目缩放比例与本体大小的简写"><a href="#flex-项目缩放比例与本体大小的简写" class="headerlink" title="flex 项目缩放比例与本体大小的简写"></a>flex 项目缩放比例与本体大小的简写</h3><p>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto</p><h3 id="align-self-单个项目的对齐方式（交叉轴方向）"><a href="#align-self-单个项目的对齐方式（交叉轴方向）" class="headerlink" title="align-self 单个项目的对齐方式（交叉轴方向）"></a>align-self 单个项目的对齐方式（交叉轴方向）</h3><p>align-self 使单个项目具有和其他项目独立的对齐方式，会覆盖项目的 align-items 属性<br>默认为 auto ，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。<br>还具有其他 align-items 的值。</p>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flex</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
